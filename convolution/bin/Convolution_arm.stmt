module name=Convolution, target=arm-64-android-armv7s-debug-opencl
external_plus_metadata func Convolution (input, filter, stride, output) {
return_second(halide_print(stringify("Entering Pipeline Convolution", "\n")), "Entering Pipeline Convolution")
return_second(halide_print(stringify(" Input Buffer input:", " ", input.buffer, "\n")), " Input Buffer input:")
return_second(halide_print(stringify(" Input Buffer filter:", " ", filter.buffer, "\n")), " Input Buffer filter:")
return_second(halide_print(stringify(" Input int32 stride:", " ", stride, "\n")), " Input int32 stride:")
return_second(halide_print(stringify(" Output Buffer output:", " ", output.buffer, "\n")), " Output Buffer output:")
assert((reinterpret(uint64, output.buffer) != (uint64)0), halide_error_buffer_argument_is_null("output"))
assert((reinterpret(uint64, input.buffer) != (uint64)0), halide_error_buffer_argument_is_null("input"))
assert((reinterpret(uint64, filter.buffer) != (uint64)0), halide_error_buffer_argument_is_null("filter"))
let filter = _halide_buffer_get_host(filter.buffer)
let filter.type.code = _halide_buffer_get_type_code(filter.buffer)
let filter.type.bits = _halide_buffer_get_type_bits(filter.buffer)
let filter.type.lanes = _halide_buffer_get_type_lanes(filter.buffer)
let filter.dimensions = _halide_buffer_get_dimensions(filter.buffer)
let filter.min.0 = _halide_buffer_get_min(filter.buffer, 0)
let filter.extent.0 = _halide_buffer_get_extent(filter.buffer, 0)
let filter.stride.0 = _halide_buffer_get_stride(filter.buffer, 0)
let filter.min.1 = _halide_buffer_get_min(filter.buffer, 1)
let filter.extent.1 = _halide_buffer_get_extent(filter.buffer, 1)
let filter.stride.1 = _halide_buffer_get_stride(filter.buffer, 1)
let filter.min.2 = _halide_buffer_get_min(filter.buffer, 2)
let filter.extent.2 = _halide_buffer_get_extent(filter.buffer, 2)
let filter.stride.2 = _halide_buffer_get_stride(filter.buffer, 2)
let filter.min.3 = _halide_buffer_get_min(filter.buffer, 3)
let filter.extent.3 = _halide_buffer_get_extent(filter.buffer, 3)
let filter.stride.3 = _halide_buffer_get_stride(filter.buffer, 3)
let input = _halide_buffer_get_host(input.buffer)
let input.type.code = _halide_buffer_get_type_code(input.buffer)
let input.type.bits = _halide_buffer_get_type_bits(input.buffer)
let input.type.lanes = _halide_buffer_get_type_lanes(input.buffer)
let input.dimensions = _halide_buffer_get_dimensions(input.buffer)
let input.min.0 = _halide_buffer_get_min(input.buffer, 0)
let input.extent.0 = _halide_buffer_get_extent(input.buffer, 0)
let input.stride.0 = _halide_buffer_get_stride(input.buffer, 0)
let input.min.1 = _halide_buffer_get_min(input.buffer, 1)
let input.extent.1 = _halide_buffer_get_extent(input.buffer, 1)
let input.stride.1 = _halide_buffer_get_stride(input.buffer, 1)
let input.min.2 = _halide_buffer_get_min(input.buffer, 2)
let input.extent.2 = _halide_buffer_get_extent(input.buffer, 2)
let input.stride.2 = _halide_buffer_get_stride(input.buffer, 2)
let input.min.3 = _halide_buffer_get_min(input.buffer, 3)
let input.extent.3 = _halide_buffer_get_extent(input.buffer, 3)
let input.stride.3 = _halide_buffer_get_stride(input.buffer, 3)
let output = _halide_buffer_get_host(output.buffer)
let output.type.code = _halide_buffer_get_type_code(output.buffer)
let output.type.bits = _halide_buffer_get_type_bits(output.buffer)
let output.type.lanes = _halide_buffer_get_type_lanes(output.buffer)
let output.dimensions = _halide_buffer_get_dimensions(output.buffer)
let output.min.0 = _halide_buffer_get_min(output.buffer, 0)
let output.extent.0 = _halide_buffer_get_extent(output.buffer, 0)
let output.stride.0 = _halide_buffer_get_stride(output.buffer, 0)
let output.min.1 = _halide_buffer_get_min(output.buffer, 1)
let output.extent.1 = _halide_buffer_get_extent(output.buffer, 1)
let output.stride.1 = _halide_buffer_get_stride(output.buffer, 1)
let output.min.2 = _halide_buffer_get_min(output.buffer, 2)
let output.extent.2 = _halide_buffer_get_extent(output.buffer, 2)
let output.stride.2 = _halide_buffer_get_stride(output.buffer, 2)
let output.min.3 = _halide_buffer_get_min(output.buffer, 3)
let output.extent.3 = _halide_buffer_get_extent(output.buffer, 3)
let output.stride.3 = _halide_buffer_get_stride(output.buffer, 3)
let input.extent.1.required = (let t1290 = (stride < 0) in (max(min(((select(t1290, output.min.1, ((output.min.1 + output.extent.1) + -1))*stride) + filter.extent.1), input.extent.1), 1) - max(min((select(t1290, ((output.min.1 + output.extent.1) + -1), output.min.1)*stride), (input.extent.1 + -1)), 0)))
let input.min.1.required.s = min((select((stride < 0), ((output.min.1 + output.extent.1) + -1), output.min.1)*stride), (input.extent.1 + -1))
let input.extent.2.required = (let t1292 = (stride < 0) in (max(min(((select(t1292, output.min.2, ((output.min.2 + output.extent.2) + -1))*stride) + filter.extent.2), input.extent.2), 1) - max(min((select(t1292, ((output.min.2 + output.extent.2) + -1), output.min.2)*stride), (input.extent.2 + -1)), 0)))
let input.min.2.required.s = min((select((stride < 0), ((output.min.2 + output.extent.2) + -1), output.min.2)*stride), (input.extent.2 + -1))
let output.extent.0.required.s = (let t1294 = ((filter.extent.3 % 3) == 0) in (let t1295 = ((filter.extent.3 % 2) == 0) in select(t1294, (min((((((output.extent.0 + -1)/3)*3) + output.min.0) + 2), ((output.min.0 + output.extent.0) + -1)) - min(output.min.0, ((output.min.0 + output.extent.0) + -3))), select(t1295, (min((((((output.extent.0 + -1)/2)*2) + output.min.0) + 1), ((output.min.0 + output.extent.0) + -1)) - min(output.min.0, ((output.min.0 + output.extent.0) + -2))), select((t1295 && t1294), (min((((((output.extent.0 + -1)/6)*6) + output.min.0) + 5), ((output.min.0 + output.extent.0) + -1)) - min(output.min.0, ((output.min.0 + output.extent.0) + -6))), (output.extent.0 + -1))))))
let output.min.0.required = (let t1297 = ((filter.extent.3 % 3) == 0) in (let t1298 = ((filter.extent.3 % 2) == 0) in select(t1297, min(output.min.0, ((output.min.0 + output.extent.0) + -3)), select(t1298, min(output.min.0, ((output.min.0 + output.extent.0) + -2)), select((t1298 && t1297), min(output.min.0, ((output.min.0 + output.extent.0) + -6)), output.min.0)))))
if (_halide_buffer_is_bounds_query(filter.buffer)) {
  _halide_buffer_init(filter.buffer, _halide_buffer_get_shape(filter.buffer), reinterpret((void *), (uint64)0), (uint64)0, reinterpret((halide_device_interface_t *), (uint64)0), 2, 32, 4, make_struct((halide_dimension_t *), 0, filter.extent.0, 1, 0, 0, filter.extent.1, filter.extent.0, 0, 0, filter.extent.2, (filter.extent.0*filter.extent.1), 0, output.min.0, output.extent.0, ((filter.extent.0*filter.extent.1)*filter.extent.2), 0), (uint64)0)
}
if (_halide_buffer_is_bounds_query(input.buffer)) {
  _halide_buffer_init(input.buffer, _halide_buffer_get_shape(input.buffer), reinterpret((void *), (uint64)0), (uint64)0, reinterpret((halide_device_interface_t *), (uint64)0), 2, 32, 4, make_struct((halide_dimension_t *), 0, filter.extent.0, 1, 0, max(input.min.1.required.s, 0), input.extent.1.required, filter.extent.0, 0, max(input.min.2.required.s, 0), input.extent.2.required, (filter.extent.0*input.extent.1.required), 0, output.min.3, output.extent.3, ((filter.extent.0*input.extent.1.required)*input.extent.2.required), 0), (uint64)0)
}
if (_halide_buffer_is_bounds_query(output.buffer)) {
  _halide_buffer_init(output.buffer, _halide_buffer_get_shape(output.buffer), reinterpret((void *), (uint64)0), (uint64)0, reinterpret((halide_device_interface_t *), (uint64)0), 2, 32, 4, make_struct((halide_dimension_t *), output.min.0.required, (output.extent.0.required.s + 1), 1, 0, output.min.1, output.extent.1, (output.extent.0.required.s + 1), 0, output.min.2, output.extent.2, ((output.extent.0.required.s + 1)*output.extent.1), 0, output.min.3, output.extent.3, (((output.extent.0.required.s + 1)*output.extent.1)*output.extent.2), 0), (uint64)0)
}
if (!((_halide_buffer_is_bounds_query(filter.buffer) || _halide_buffer_is_bounds_query(input.buffer)) || _halide_buffer_is_bounds_query(output.buffer))) {
  assert((((filter.type.code == (uint8)2) && (filter.type.bits == (uint8)32)) && (filter.type.lanes == (uint16)1)), halide_error_bad_type("Input buffer filter", filter.type.code, (uint8)2, filter.type.bits, (uint8)32, filter.type.lanes, (uint16)1))
  assert((filter.dimensions == 4), halide_error_bad_dimensions("Input buffer filter", filter.dimensions, 4))
  assert((((input.type.code == (uint8)2) && (input.type.bits == (uint8)32)) && (input.type.lanes == (uint16)1)), halide_error_bad_type("Input buffer input", input.type.code, (uint8)2, input.type.bits, (uint8)32, input.type.lanes, (uint16)1))
  assert((input.dimensions == 4), halide_error_bad_dimensions("Input buffer input", input.dimensions, 4))
  assert((((output.type.code == (uint8)2) && (output.type.bits == (uint8)32)) && (output.type.lanes == (uint16)1)), halide_error_bad_type("Output buffer output", output.type.code, (uint8)2, output.type.bits, (uint8)32, output.type.lanes, (uint16)1))
  assert((output.dimensions == 4), halide_error_bad_dimensions("Output buffer output", output.dimensions, 4))
  assert(((filter.min.0 <= 0) && (0 <= filter.min.0)), halide_error_access_out_of_bounds("Input buffer filter", 0, 0, (filter.extent.0 + -1), filter.min.0, ((filter.min.0 + filter.extent.0) + -1)))
  assert((0 <= filter.extent.0), halide_error_buffer_extents_negative("Input buffer filter", 0, filter.extent.0))
  assert(((filter.min.1 <= 0) && (0 <= filter.min.1)), halide_error_access_out_of_bounds("Input buffer filter", 1, 0, (filter.extent.1 + -1), filter.min.1, ((filter.min.1 + filter.extent.1) + -1)))
  assert((0 <= filter.extent.1), halide_error_buffer_extents_negative("Input buffer filter", 1, filter.extent.1))
  assert(((filter.min.2 <= 0) && (0 <= filter.min.2)), halide_error_access_out_of_bounds("Input buffer filter", 2, 0, (filter.extent.2 + -1), filter.min.2, ((filter.min.2 + filter.extent.2) + -1)))
  assert((0 <= filter.extent.2), halide_error_buffer_extents_negative("Input buffer filter", 2, filter.extent.2))
  assert(((filter.min.3 <= output.min.0) && (((output.min.0 + output.extent.0) - filter.extent.3) <= filter.min.3)), halide_error_access_out_of_bounds("Input buffer filter", 3, output.min.0, ((output.min.0 + output.extent.0) + -1), filter.min.3, ((filter.min.3 + filter.extent.3) + -1)))
  assert((0 <= filter.extent.3), halide_error_buffer_extents_negative("Input buffer filter", 3, filter.extent.3))
  assert(((input.min.0 <= 0) && ((filter.extent.0 - input.extent.0) <= input.min.0)), halide_error_access_out_of_bounds("Input buffer input", 0, 0, (filter.extent.0 + -1), input.min.0, ((input.min.0 + input.extent.0) + -1)))
  assert((0 <= input.extent.0), halide_error_buffer_extents_negative("Input buffer input", 0, input.extent.0))
  assert(((input.min.1 <= max(input.min.1.required.s, 0)) && (((max(input.min.1.required.s, 0) + input.extent.1.required) - input.extent.1) <= input.min.1)), halide_error_access_out_of_bounds("Input buffer input", 1, max(input.min.1.required.s, 0), ((max(input.min.1.required.s, 0) + input.extent.1.required) + -1), input.min.1, ((input.min.1 + input.extent.1) + -1)))
  assert((0 <= input.extent.1), halide_error_buffer_extents_negative("Input buffer input", 1, input.extent.1))
  assert(((input.min.2 <= max(input.min.2.required.s, 0)) && (((max(input.min.2.required.s, 0) + input.extent.2.required) - input.extent.2) <= input.min.2)), halide_error_access_out_of_bounds("Input buffer input", 2, max(input.min.2.required.s, 0), ((max(input.min.2.required.s, 0) + input.extent.2.required) + -1), input.min.2, ((input.min.2 + input.extent.2) + -1)))
  assert((0 <= input.extent.2), halide_error_buffer_extents_negative("Input buffer input", 2, input.extent.2))
  assert(((input.min.3 <= output.min.3) && (((output.min.3 + output.extent.3) - input.extent.3) <= input.min.3)), halide_error_access_out_of_bounds("Input buffer input", 3, output.min.3, ((output.min.3 + output.extent.3) + -1), input.min.3, ((input.min.3 + input.extent.3) + -1)))
  assert((0 <= input.extent.3), halide_error_buffer_extents_negative("Input buffer input", 3, input.extent.3))
  assert(((output.min.0 <= output.min.0.required) && ((((output.min.0.required + output.extent.0.required.s) - output.extent.0) + 1) <= output.min.0)), halide_error_access_out_of_bounds("Output buffer output", 0, output.min.0.required, (output.min.0.required + output.extent.0.required.s), output.min.0, ((output.min.0 + output.extent.0) + -1)))
  assert((0 <= output.extent.0), halide_error_buffer_extents_negative("Output buffer output", 0, output.extent.0))
  assert((0 <= output.extent.1), halide_error_buffer_extents_negative("Output buffer output", 1, output.extent.1))
  assert((0 <= output.extent.2), halide_error_buffer_extents_negative("Output buffer output", 2, output.extent.2))
  assert((0 <= output.extent.3), halide_error_buffer_extents_negative("Output buffer output", 3, output.extent.3))
  assert((filter.stride.0 == 1), halide_error_constraint_violated("filter.stride.0", filter.stride.0, "1", 1))
  assert((input.stride.0 == 1), halide_error_constraint_violated("input.stride.0", input.stride.0, "1", 1))
  assert((output.stride.0 == 1), halide_error_constraint_violated("output.stride.0", output.stride.0, "1", 1))
  let filter.total_extent.1 = (int64(filter.extent.1)*int64(filter.extent.0))
  let filter.total_extent.3 = (int64(filter.extent.3)*(int64(filter.extent.2)*filter.total_extent.1))
  let input.total_extent.1 = (int64(input.extent.1)*int64(input.extent.0))
  let input.total_extent.3 = (int64(input.extent.3)*(int64(input.extent.2)*input.total_extent.1))
  let output.total_extent.1 = (int64(output.extent.1)*int64(output.extent.0))
  let output.total_extent.3 = (int64(output.extent.3)*(int64(output.extent.2)*output.total_extent.1))
  assert((abs(int64(filter.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("filter", abs(int64(filter.extent.0)), (uint64)2147483647))
  assert((abs((int64(filter.extent.1)*int64(filter.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("filter", abs((int64(filter.extent.1)*int64(filter.stride.1))), (uint64)2147483647))
  assert((filter.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("filter", filter.total_extent.1, (int64)2147483647))
  assert((abs((int64(filter.extent.2)*int64(filter.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("filter", abs((int64(filter.extent.2)*int64(filter.stride.2))), (uint64)2147483647))
  assert(((int64(filter.extent.2)*filter.total_extent.1) <= (int64)2147483647), halide_error_buffer_extents_too_large("filter", (int64(filter.extent.2)*filter.total_extent.1), (int64)2147483647))
  assert((abs((int64(filter.extent.3)*int64(filter.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("filter", abs((int64(filter.extent.3)*int64(filter.stride.3))), (uint64)2147483647))
  assert((filter.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("filter", filter.total_extent.3, (int64)2147483647))
  assert((abs(int64(input.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("input", abs(int64(input.extent.0)), (uint64)2147483647))
  assert((abs((int64(input.extent.1)*int64(input.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("input", abs((int64(input.extent.1)*int64(input.stride.1))), (uint64)2147483647))
  assert((input.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("input", input.total_extent.1, (int64)2147483647))
  assert((abs((int64(input.extent.2)*int64(input.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("input", abs((int64(input.extent.2)*int64(input.stride.2))), (uint64)2147483647))
  assert(((int64(input.extent.2)*input.total_extent.1) <= (int64)2147483647), halide_error_buffer_extents_too_large("input", (int64(input.extent.2)*input.total_extent.1), (int64)2147483647))
  assert((abs((int64(input.extent.3)*int64(input.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("input", abs((int64(input.extent.3)*int64(input.stride.3))), (uint64)2147483647))
  assert((input.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("input", input.total_extent.3, (int64)2147483647))
  assert((abs(int64(output.extent.0)) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("output", abs(int64(output.extent.0)), (uint64)2147483647))
  assert((abs((int64(output.extent.1)*int64(output.stride.1))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("output", abs((int64(output.extent.1)*int64(output.stride.1))), (uint64)2147483647))
  assert((output.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("output", output.total_extent.1, (int64)2147483647))
  assert((abs((int64(output.extent.2)*int64(output.stride.2))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("output", abs((int64(output.extent.2)*int64(output.stride.2))), (uint64)2147483647))
  assert(((int64(output.extent.2)*output.total_extent.1) <= (int64)2147483647), halide_error_buffer_extents_too_large("output", (int64(output.extent.2)*output.total_extent.1), (int64)2147483647))
  assert((abs((int64(output.extent.3)*int64(output.stride.3))) <= (uint64)2147483647), halide_error_buffer_allocation_too_large("output", abs((int64(output.extent.3)*int64(output.stride.3))), (uint64)2147483647))
  assert((output.total_extent.3 <= (int64)2147483647), halide_error_buffer_extents_too_large("output", output.total_extent.3, (int64)2147483647))
  assert((filter != reinterpret((void *), (uint64)0)), halide_error_host_is_null("Input buffer filter"))
  assert((input != reinterpret((void *), (uint64)0)), halide_error_host_is_null("Input buffer input"))
  assert((output != reinterpret((void *), (uint64)0)), halide_error_host_is_null("Output buffer output"))
  produce output {
    if (((filter.extent.3 % 3) == 0)) {
      let halide_copy_to_host_result = halide_copy_to_host(filter.buffer)
      assert((halide_copy_to_host_result == 0), halide_copy_to_host_result)
      let halide_copy_to_host_result$3 = halide_copy_to_host(input.buffer)
      assert((halide_copy_to_host_result$3 == 0), halide_copy_to_host_result$3)
      let halide_copy_to_host_result$6 = halide_copy_to_host(output.buffer)
      assert((halide_copy_to_host_result$6 == 0), halide_copy_to_host_result$6)
      let t1430 = (((output.min.0 + (output.min.1*output.stride.1)) + (output.min.2*output.stride.2)) + (output.min.3*output.stride.3))
      let t1431 = (stride*3)
      let t1432 = max((output.extent.1/4), 0)
      let t1422 = (stride < 0)
      let t1429 = max(((output.extent.1 + 3)/4), t1432)
      let t1416 = ((output.extent.0 + 2)/3)
      let t1419 = (((input.min.0 + (input.min.1*input.stride.1)) + (input.min.2*input.stride.2)) + (input.min.3*input.stride.3))
      let t1418 = (((filter.min.0 + (filter.min.1*filter.stride.1)) + (filter.min.2*filter.stride.2)) + (filter.min.3*filter.stride.3))
      let t1417 = ((output.min.0 + output.extent.0) + -3)
      for (output.s0.batch, output.min.3, output.extent.3) {
        let t1445 = ((output.s0.batch*output.stride.3) - t1430)
        let t1446 = (output.s0.batch*input.stride.3)
        let t1436 = select(t1422, (0 - t1431), 0)
        let t1438 = select(t1422, t1431, 0)
        let t1437 = select(t1422, 0, t1431)
        let t1444 = (t1429 - t1432)
        parallel (output.s0.y, output.min.2, output.extent.2) {
          let t1458 = (t1445 + (output.s0.y*output.stride.2))
          let t1459 = (output.s0.y*stride)
          let t1460 = (0 - min(t1459, 0))
          let t1448 = min(max((input.extent.2 - t1459), t1460), filter.extent.2)
          let t1447 = min(t1460, filter.extent.2)
          let t1452 = (input.extent.1 - t1437)
          for (output.s0.x.xo, 0, t1432) {
            let t1473 = (output.min.1 + (output.s0.x.xo*4))
            let t1474 = (t1458 + (t1473*output.stride.1))
            let t1475 = (t1473*stride)
            let t1476 = (t1436 - t1475)
            let t1477 = (t1438 + t1475)
            let t1466 = min(max(min((t1452 - t1475), (input.extent.1 - t1477)), max(max((0 - t1477), t1476), 0)), filter.extent.1)
            let t1465 = min(max(t1476, 0), filter.extent.1)
            let t1469 = (filter.extent.2 - t1448)
            for (output.s0.channel.c_out, 0, t1416) {
              let output.s0.channel.c_in.base = min((output.min.0 + (output.s0.channel.c_out*3)), t1417)
              allocate convolved[float64 * 4]
              produce convolved {
                convolved[ramp(0, 1, 4)] = x4(0.000000)
                let t1478 = ((output.s0.channel.c_in.base*filter.stride.3) - t1418)
                for (convolved.s1.filter_dom$z, 0, t1447) {
                  let t1483 = ((input.extent.2 - convolved.s1.filter_dom$z) <= t1459)
                  let t1482 = (t1459 < (0 - convolved.s1.filter_dom$z))
                  let t1484 = (max(min((t1459 + convolved.s1.filter_dom$z), (input.extent.2 + -1)), 0)*input.stride.2)
                  let t1481 = (t1478 + (convolved.s1.filter_dom$z*filter.stride.2))
                  for (convolved.s1.filter_dom$y, 0, filter.extent.1) {
                    let t1488 = (input.extent.1 - convolved.s1.filter_dom$y)
                    let t1487 = (0 - convolved.s1.filter_dom$y)
                    let t1486 = (t1481 + (convolved.s1.filter_dom$y*filter.stride.1))
                    let t1489 = (t1475 + convolved.s1.filter_dom$y)
                    let t1490 = (input.extent.1 + -1)
                    for (convolved.s1.filter_dom$x, 0, filter.extent.0) {
                      convolved[ramp(0, 1, 4)] = (let t1309 = ramp(t1475, stride, 4) in (convolved[ramp(0, 1, 4)] + (x4(float64(filter[(t1486 + convolved.s1.filter_dom$x)]))*float64x4(select(((((t1309 < x4(t1487)) || (x4(t1488) <= t1309)) || x4(t1482)) || x4(t1483)), x4(0.000000f), input[((x4(((t1446 - t1419) + t1484)) + (max(min(ramp(t1489, stride, 4), x4(t1490)), x4(0))*x4(input.stride.1))) + x4(convolved.s1.filter_dom$x))])))))
                    }
                  }
                }
                let t1492 = ((output.s0.channel.c_in.base*filter.stride.3) - t1418)
                let t1491 = (t1448 - t1447)
                let t1497 = (filter.extent.1 - t1466)
                for (convolved.s1.filter_dom$z, t1447, t1491) {
                  let t1499 = ((t1459 + convolved.s1.filter_dom$z)*input.stride.2)
                  let t1498 = (t1492 + (convolved.s1.filter_dom$z*filter.stride.2))
                  for (convolved.s1.filter_dom$y, 0, t1465) {
                    let t1503 = (input.extent.1 - convolved.s1.filter_dom$y)
                    let t1502 = (0 - convolved.s1.filter_dom$y)
                    let t1501 = (t1498 + (convolved.s1.filter_dom$y*filter.stride.1))
                    let t1504 = (t1475 + convolved.s1.filter_dom$y)
                    let t1505 = (input.extent.1 + -1)
                    for (convolved.s1.filter_dom$x, 0, filter.extent.0) {
                      convolved[ramp(0, 1, 4)] = (let t1318 = ramp(t1475, stride, 4) in (convolved[ramp(0, 1, 4)] + (x4(float64(filter[(t1501 + convolved.s1.filter_dom$x)]))*float64x4(select(((t1318 < x4(t1502)) || (x4(t1503) <= t1318)), x4(0.000000f), input[((x4(((t1446 - t1419) + t1499)) + (max(min(ramp(t1504, stride, 4), x4(t1505)), x4(0))*x4(input.stride.1))) + x4(convolved.s1.filter_dom$x))])))))
                    }
                  }
                  let t1509 = (stride*input.stride.1)
                  let t1506 = (t1466 - t1465)
                  let t1508 = ((t1446 - t1419) + ((t1459 + convolved.s1.filter_dom$z)*input.stride.2))
                  let t1507 = (t1492 + (convolved.s1.filter_dom$z*filter.stride.2))
                  for (convolved.s1.filter_dom$y, t1465, t1506) {
                    let t1511 = (t1508 + ((t1475 + convolved.s1.filter_dom$y)*input.stride.1))
                    let t1510 = (t1507 + (convolved.s1.filter_dom$y*filter.stride.1))
                    for (convolved.s1.filter_dom$x, 0, filter.extent.0) {
                      convolved[ramp(0, 1, 4)] = (convolved[ramp(0, 1, 4)] + (x4(float64(filter[(t1510 + convolved.s1.filter_dom$x)]))*float64x4(input[ramp((t1511 + convolved.s1.filter_dom$x), t1509, 4)])))
                    }
                  }
                  let t1513 = ((t1459 + convolved.s1.filter_dom$z)*input.stride.2)
                  let t1512 = (t1492 + (convolved.s1.filter_dom$z*filter.stride.2))
                  for (convolved.s1.filter_dom$y, t1466, t1497) {
                    let t1516 = (input.extent.1 - convolved.s1.filter_dom$y)
                    let t1515 = (t1512 + (convolved.s1.filter_dom$y*filter.stride.1))
                    let t1517 = (t1475 + convolved.s1.filter_dom$y)
                    let t1518 = (input.extent.1 + -1)
                    for (convolved.s1.filter_dom$x, 0, filter.extent.0) {
                      convolved[ramp(0, 1, 4)] = (convolved[ramp(0, 1, 4)] + (x4(float64(filter[(t1515 + convolved.s1.filter_dom$x)]))*float64x4(select((ramp(t1475, stride, 4) < x4(t1516)), input[((x4(((t1446 - t1419) + t1513)) + (max(min(ramp(t1517, stride, 4), x4(t1518)), x4(0))*x4(input.stride.1))) + x4(convolved.s1.filter_dom$x))], x4(0.000000f)))))
                    }
                  }
                }
                let t1519 = ((output.s0.channel.c_in.base*filter.stride.3) - t1418)
                for (convolved.s1.filter_dom$z, t1448, t1469) {
                  let t1523 = ((input.extent.2 - convolved.s1.filter_dom$z) <= t1459)
                  let t1524 = (max(min((t1459 + convolved.s1.filter_dom$z), (input.extent.2 + -1)), 0)*input.stride.2)
                  let t1522 = (t1519 + (convolved.s1.filter_dom$z*filter.stride.2))
                  for (convolved.s1.filter_dom$y, 0, filter.extent.1) {
                    let t1528 = (input.extent.1 - convolved.s1.filter_dom$y)
                    let t1527 = (0 - convolved.s1.filter_dom$y)
                    let t1526 = (t1522 + (convolved.s1.filter_dom$y*filter.stride.1))
                    let t1529 = (t1475 + convolved.s1.filter_dom$y)
                    let t1530 = (input.extent.1 + -1)
                    for (convolved.s1.filter_dom$x, 0, filter.extent.0) {
                      convolved[ramp(0, 1, 4)] = (let t1321 = ramp(t1475, stride, 4) in (convolved[ramp(0, 1, 4)] + (x4(float64(filter[(t1526 + convolved.s1.filter_dom$x)]))*float64x4(select((((t1321 < x4(t1527)) || (x4(t1528) <= t1321)) || x4(t1523)), x4(0.000000f), input[((x4(((t1446 - t1419) + t1524)) + (max(min(ramp(t1529, stride, 4), x4(t1530)), x4(0))*x4(input.stride.1))) + x4(convolved.s1.filter_dom$x))])))))
                    }
                  }
                }
              }
              output[ramp((t1474 + output.s0.channel.c_in.base), output.stride.1, 4)] = float32x4(convolved[ramp(0, 1, 4)])
              free convolved
              allocate convolved[float64 * 4]
              produce convolved {
                convolved[ramp(0, 1, 4)] = x4(0.000000)
                let t1531 = (((output.s0.channel.c_in.base + 1)*filter.stride.3) - t1418)
                for (convolved.s1.filter_dom$z, 0, t1447) {
                  let t1536 = ((input.extent.2 - convolved.s1.filter_dom$z) <= t1459)
                  let t1535 = (t1459 < (0 - convolved.s1.filter_dom$z))
                  let t1537 = (max(min((t1459 + convolved.s1.filter_dom$z), (input.extent.2 + -1)), 0)*input.stride.2)
                  let t1534 = (t1531 + (convolved.s1.filter_dom$z*filter.stride.2))
                  for (convolved.s1.filter_dom$y, 0, filter.extent.1) {
                    let t1541 = (input.extent.1 - convolved.s1.filter_dom$y)
                    let t1540 = (0 - convolved.s1.filter_dom$y)
                    let t1539 = (t1534 + (convolved.s1.filter_dom$y*filter.stride.1))
                    let t1542 = (t1475 + convolved.s1.filter_dom$y)
                    let t1543 = (input.extent.1 + -1)
                    for (convolved.s1.filter_dom$x, 0, filter.extent.0) {
                      convolved[ramp(0, 1, 4)] = (let t1325 = ramp(t1475, stride, 4) in (convolved[ramp(0, 1, 4)] + (x4(float64(filter[(t1539 + convolved.s1.filter_dom$x)]))*float64x4(select(((((t1325 < x4(t1540)) || (x4(t1541) <= t1325)) || x4(t1535)) || x4(t1536)), x4(0.000000f), input[((x4(((t1446 - t1419) + t1537)) + (max(min(ramp(t1542, stride, 4), x4(t1543)), x4(0))*x4(input.stride.1))) + x4(convolved.s1.filter_dom$x))])))))
                    }
                  }
                }
                let t1545 = (((output.s0.channel.c_in.base + 1)*filter.stride.3) - t1418)
                let t1544 = (t1448 - t1447)
                let t1550 = (filter.extent.1 - t1466)
                for (convolved.s1.filter_dom$z, t1447, t1544) {
                  let t1552 = ((t1459 + convolved.s1.filter_dom$z)*input.stride.2)
                  let t1551 = (t1545 + (convolved.s1.filter_dom$z*filter.stride.2))
                  for (convolved.s1.filter_dom$y, 0, t1465) {
                    let t1556 = (input.extent.1 - convolved.s1.filter_dom$y)
                    let t1555 = (0 - convolved.s1.filter_dom$y)
                    let t1554 = (t1551 + (convolved.s1.filter_dom$y*filter.stride.1))
                    let t1557 = (t1475 + convolved.s1.filter_dom$y)
                    let t1558 = (input.extent.1 + -1)
                    for (convolved.s1.filter_dom$x, 0, filter.extent.0) {
                      convolved[ramp(0, 1, 4)] = (let t1334 = ramp(t1475, stride, 4) in (convolved[ramp(0, 1, 4)] + (x4(float64(filter[(t1554 + convolved.s1.filter_dom$x)]))*float64x4(select(((t1334 < x4(t1555)) || (x4(t1556) <= t1334)), x4(0.000000f), input[((x4(((t1446 - t1419) + t1552)) + (max(min(ramp(t1557, stride, 4), x4(t1558)), x4(0))*x4(input.stride.1))) + x4(convolved.s1.filter_dom$x))])))))
                    }
                  }
                  let t1562 = (stride*input.stride.1)
                  let t1559 = (t1466 - t1465)
                  let t1561 = ((t1446 - t1419) + ((t1459 + convolved.s1.filter_dom$z)*input.stride.2))
                  let t1560 = (t1545 + (convolved.s1.filter_dom$z*filter.stride.2))
                  for (convolved.s1.filter_dom$y, t1465, t1559) {
                    let t1564 = (t1561 + ((t1475 + convolved.s1.filter_dom$y)*input.stride.1))
                    let t1563 = (t1560 + (convolved.s1.filter_dom$y*filter.stride.1))
                    for (convolved.s1.filter_dom$x, 0, filter.extent.0) {
                      convolved[ramp(0, 1, 4)] = (convolved[ramp(0, 1, 4)] + (x4(float64(filter[(t1563 + convolved.s1.filter_dom$x)]))*float64x4(input[ramp((t1564 + convolved.s1.filter_dom$x), t1562, 4)])))
                    }
                  }
                  let t1566 = ((t1459 + convolved.s1.filter_dom$z)*input.stride.2)
                  let t1565 = (t1545 + (convolved.s1.filter_dom$z*filter.stride.2))
                  for (convolved.s1.filter_dom$y, t1466, t1550) {
                    let t1569 = (input.extent.1 - convolved.s1.filter_dom$y)
                    let t1568 = (t1565 + (convolved.s1.filter_dom$y*filter.stride.1))
                    let t1570 = (t1475 + convolved.s1.filter_dom$y)
                    let t1571 = (input.extent.1 + -1)
                    for (convolved.s1.filter_dom$x, 0, filter.extent.0) {
                      convolved[ramp(0, 1, 4)] = (convolved[ramp(0, 1, 4)] + (x4(float64(filter[(t1568 + convolved.s1.filter_dom$x)]))*float64x4(select((ramp(t1475, stride, 4) < x4(t1569)), input[((x4(((t1446 - t1419) + t1566)) + (max(min(ramp(t1570, stride, 4), x4(t1571)), x4(0))*x4(input.stride.1))) + x4(convolved.s1.filter_dom$x))], x4(0.000000f)))))
                    }
                  }
                }
                let t1572 = (((output.s0.channel.c_in.base + 1)*filter.stride.3) - t1418)
                for (convolved.s1.filter_dom$z, t1448, t1469) {
                  let t1576 = ((input.extent.2 - convolved.s1.filter_dom$z) <= t1459)
                  let t1577 = (max(min((t1459 + convolved.s1.filter_dom$z), (input.extent.2 + -1)), 0)*input.stride.2)
                  let t1575 = (t1572 + (convolved.s1.filter_dom$z*filter.stride.2))
                  for (convolved.s1.filter_dom$y, 0, filter.extent.1) {
                    let t1581 = (input.extent.1 - convolved.s1.filter_dom$y)
                    let t1580 = (0 - convolved.s1.filter_dom$y)
                    let t1579 = (t1575 + (convolved.s1.filter_dom$y*filter.stride.1))
                    let t1582 = (t1475 + convolved.s1.filter_dom$y)
                    let t1583 = (input.extent.1 + -1)
                    for (convolved.s1.filter_dom$x, 0, filter.extent.0) {
                      convolved[ramp(0, 1, 4)] = (let t1337 = ramp(t1475, stride, 4) in (convolved[ramp(0, 1, 4)] + (x4(float64(filter[(t1579 + convolved.s1.filter_dom$x)]))*float64x4(select((((t1337 < x4(t1580)) || (x4(t1581) <= t1337)) || x4(t1576)), x4(0.000000f), input[((x4(((t1446 - t1419) + t1577)) + (max(min(ramp(t1582, stride, 4), x4(t1583)), x4(0))*x4(input.stride.1))) + x4(convolved.s1.filter_dom$x))])))))
                    }
                  }
                }
              }
              output[ramp(((t1474 + output.s0.channel.c_in.base) + 1), output.stride.1, 4)] = float32x4(convolved[ramp(0, 1, 4)])
              free convolved
              allocate convolved[float64 * 4]
              produce convolved {
                convolved[ramp(0, 1, 4)] = x4(0.000000)
                let t1584 = (((output.s0.channel.c_in.base + 2)*filter.stride.3) - t1418)
                for (convolved.s1.filter_dom$z, 0, t1447) {
                  let t1589 = ((input.extent.2 - convolved.s1.filter_dom$z) <= t1459)
                  let t1588 = (t1459 < (0 - convolved.s1.filter_dom$z))
                  let t1590 = (max(min((t1459 + convolved.s1.filter_dom$z), (input.extent.2 + -1)), 0)*input.stride.2)
                  let t1587 = (t1584 + (convolved.s1.filter_dom$z*filter.stride.2))
                  for (convolved.s1.filter_dom$y, 0, filter.extent.1) {
                    let t1594 = (input.extent.1 - convolved.s1.filter_dom$y)
                    let t1593 = (0 - convolved.s1.filter_dom$y)
                    let t1592 = (t1587 + (convolved.s1.filter_dom$y*filter.stride.1))
                    let t1595 = (t1475 + convolved.s1.filter_dom$y)
                    let t1596 = (input.extent.1 + -1)
                    for (convolved.s1.filter_dom$x, 0, filter.extent.0) {
                      convolved[ramp(0, 1, 4)] = (let t1341 = ramp(t1475, stride, 4) in (convolved[ramp(0, 1, 4)] + (x4(float64(filter[(t1592 + convolved.s1.filter_dom$x)]))*float64x4(select(((((t1341 < x4(t1593)) || (x4(t1594) <= t1341)) || x4(t1588)) || x4(t1589)), x4(0.000000f), input[((x4(((t1446 - t1419) + t1590)) + (max(min(ramp(t1595, stride, 4), x4(t1596)), x4(0))*x4(input.stride.1))) + x4(convolved.s1.filter_dom$x))])))))
                    }
                  }
                }
                let t1598 = (((output.s0.channel.c_in.base + 2)*filter.stride.3) - t1418)
                let t1597 = (t1448 - t1447)
                let t1603 = (filter.extent.1 - t1466)
                for (convolved.s1.filter_dom$z, t1447, t1597) {
                  let t1605 = ((t1459 + convolved.s1.filter_dom$z)*input.stride.2)
                  let t1604 = (t1598 + (convolved.s1.filter_dom$z*filter.stride.2))
                  for (convolved.s1.filter_dom$y, 0, t1465) {
                    let t1609 = (input.extent.1 - convolved.s1.filter_dom$y)
                    let t1608 = (0 - convolved.s1.filter_dom$y)
                    let t1607 = (t1604 + (convolved.s1.filter_dom$y*filter.stride.1))
                    let t1610 = (t1475 + convolved.s1.filter_dom$y)
                    let t1611 = (input.extent.1 + -1)
                    for (convolved.s1.filter_dom$x, 0, filter.extent.0) {
                      convolved[ramp(0, 1, 4)] = (let t1350 = ramp(t1475, stride, 4) in (convolved[ramp(0, 1, 4)] + (x4(float64(filter[(t1607 + convolved.s1.filter_dom$x)]))*float64x4(select(((t1350 < x4(t1608)) || (x4(t1609) <= t1350)), x4(0.000000f), input[((x4(((t1446 - t1419) + t1605)) + (max(min(ramp(t1610, stride, 4), x4(t1611)), x4(0))*x4(input.stride.1))) + x4(convolved.s1.filter_dom$x))])))))
                    }
                  }
                  let t1615 = (stride*input.stride.1)
                  let t1612 = (t1466 - t1465)
                  let t1614 = ((t1446 - t1419) + ((t1459 + convolved.s1.filter_dom$z)*input.stride.2))
                  let t1613 = (t1598 + (convolved.s1.filter_dom$z*filter.stride.2))
                  for (convolved.s1.filter_dom$y, t1465, t1612) {
                    let t1617 = (t1614 + ((t1475 + convolved.s1.filter_dom$y)*input.stride.1))
                    let t1616 = (t1613 + (convolved.s1.filter_dom$y*filter.stride.1))
                    for (convolved.s1.filter_dom$x, 0, filter.extent.0) {
                      convolved[ramp(0, 1, 4)] = (convolved[ramp(0, 1, 4)] + (x4(float64(filter[(t1616 + convolved.s1.filter_dom$x)]))*float64x4(input[ramp((t1617 + convolved.s1.filter_dom$x), t1615, 4)])))
                    }
                  }
                  let t1619 = ((t1459 + convolved.s1.filter_dom$z)*input.stride.2)
                  let t1618 = (t1598 + (convolved.s1.filter_dom$z*filter.stride.2))
                  for (convolved.s1.filter_dom$y, t1466, t1603) {
                    let t1622 = (input.extent.1 - convolved.s1.filter_dom$y)
                    let t1621 = (t1618 + (convolved.s1.filter_dom$y*filter.stride.1))
                    let t1623 = (t1475 + convolved.s1.filter_dom$y)
                    let t1624 = (input.extent.1 + -1)
                    for (convolved.s1.filter_dom$x, 0, filter.extent.0) {
                      convolved[ramp(0, 1, 4)] = (convolved[ramp(0, 1, 4)] + (x4(float64(filter[(t1621 + convolved.s1.filter_dom$x)]))*float64x4(select((ramp(t1475, stride, 4) < x4(t1622)), input[((x4(((t1446 - t1419) + t1619)) + (max(min(ramp(t1623, stride, 4), x4(t1624)), x4(0))*x4(input.stride.1))) + x4(convolved.s1.filter_dom$x))], x4(0.000000f)))))
                    }
                  }
                }
                let t1625 = (((output.s0.channel.c_in.base + 2)*filter.stride.3) - t1418)
                for (convolved.s1.filter_dom$z, t1448, t1469) {
                  let t1629 = ((input.extent.2 - convolved.s1.filter_dom$z) <= t1459)
                  let t1630 = (max(min((t1459 + convolved.s1.filter_dom$z), (input.extent.2 + -1)), 0)*input.stride.2)
                  let t1628 = (t1625 + (convolved.s1.filter_dom$z*filter.stride.2))
                  for (convolved.s1.filter_dom$y, 0, filter.extent.1) {
                    let t1634 = (input.extent.1 - convolved.s1.filter_dom$y)
                    let t1633 = (0 - convolved.s1.filter_dom$y)
                    let t1632 = (t1628 + (convolved.s1.filter_dom$y*filter.stride.1))
                    let t1635 = (t1475 + convolved.s1.filter_dom$y)
                    let t1636 = (input.extent.1 + -1)
                    for (convolved.s1.filter_dom$x, 0, filter.extent.0) {
                      convolved[ramp(0, 1, 4)] = (let t1353 = ramp(t1475, stride, 4) in (convolved[ramp(0, 1, 4)] + (x4(float64(filter[(t1632 + convolved.s1.filter_dom$x)]))*float64x4(select((((t1353 < x4(t1633)) || (x4(t1634) <= t1353)) || x4(t1629)), x4(0.000000f), input[((x4(((t1446 - t1419) + t1630)) + (max(min(ramp(t1635, stride, 4), x4(t1636)), x4(0))*x4(input.stride.1))) + x4(convolved.s1.filter_dom$x))])))))
                    }
                  }
                }
              }
              output[ramp(((t1474 + output.s0.channel.c_in.base) + 2), output.stride.1, 4)] = float32x4(convolved[ramp(0, 1, 4)])
              free convolved
            }
          }
          let t1644 = (t1445 + (output.s0.y*output.stride.2))
          let t1637 = (output.s0.y*stride)
          let t1638 = (t1446 - t1419)
          for (output.s0.x.xo, t1432, t1444) {
            let output.s0.x.xi.new_max.s = (output.extent.1 - (output.s0.x.xo*4))
            let t1645 = min(output.s0.x.xi.new_max.s, 4)
            let t1646 = (output.min.1 + (output.s0.x.xo*4))
            for (output.s0.x.xi, 0, t1645) {
              let t1657 = (t1646 + output.s0.x.xi)
              let t1658 = (t1644 + (t1657*output.stride.1))
              let t1651 = (t1657*stride)
              for (output.s0.channel.c_out, 0, t1416) {
                let output.s0.channel.c_in.base = min((output.min.0 + (output.s0.channel.c_out*3)), t1417)
                allocate convolved[float64 * 1]
                produce convolved {
                  convolved[0] = 0.000000
                  let t1659 = ((output.s0.channel.c_in.base*filter.stride.3) - t1418)
                  for (convolved.s1.filter_dom$z, 0, filter.extent.2) {
                    let t1664 = ((input.extent.2 - convolved.s1.filter_dom$z) <= t1637)
                    let t1663 = (t1637 < (0 - convolved.s1.filter_dom$z))
                    let t1662 = (t1659 + (convolved.s1.filter_dom$z*filter.stride.2))
                    let t1665 = (t1638 + (max(min((t1637 + convolved.s1.filter_dom$z), (input.extent.2 + -1)), 0)*input.stride.2))
                    for (convolved.s1.filter_dom$y, 0, filter.extent.1) {
                      let t1668 = ((((t1651 < (0 - convolved.s1.filter_dom$y)) || ((input.extent.1 - convolved.s1.filter_dom$y) <= t1651)) || t1663) || t1664)
                      let t1669 = (t1665 + (max(min((t1651 + convolved.s1.filter_dom$y), (input.extent.1 + -1)), 0)*input.stride.1))
                      let t1667 = (t1662 + (convolved.s1.filter_dom$y*filter.stride.1))
                      for (convolved.s1.filter_dom$x, 0, filter.extent.0) {
                        convolved[0] = (convolved[0] + (float64(filter[(t1667 + convolved.s1.filter_dom$x)])*float64(select(t1668, 0.000000f, input[(t1669 + convolved.s1.filter_dom$x)]))))
                      }
                    }
                  }
                }
                output[(t1658 + output.s0.channel.c_in.base)] = float32(convolved[0])
                free convolved
                allocate convolved[float64 * 1]
                produce convolved {
                  convolved[0] = 0.000000
                  let t1670 = (((output.s0.channel.c_in.base + 1)*filter.stride.3) - t1418)
                  for (convolved.s1.filter_dom$z, 0, filter.extent.2) {
                    let t1675 = ((input.extent.2 - convolved.s1.filter_dom$z) <= t1637)
                    let t1674 = (t1637 < (0 - convolved.s1.filter_dom$z))
                    let t1673 = (t1670 + (convolved.s1.filter_dom$z*filter.stride.2))
                    let t1676 = (t1638 + (max(min((t1637 + convolved.s1.filter_dom$z), (input.extent.2 + -1)), 0)*input.stride.2))
                    for (convolved.s1.filter_dom$y, 0, filter.extent.1) {
                      let t1679 = ((((t1651 < (0 - convolved.s1.filter_dom$y)) || ((input.extent.1 - convolved.s1.filter_dom$y) <= t1651)) || t1674) || t1675)
                      let t1680 = (t1676 + (max(min((t1651 + convolved.s1.filter_dom$y), (input.extent.1 + -1)), 0)*input.stride.1))
                      let t1678 = (t1673 + (convolved.s1.filter_dom$y*filter.stride.1))
                      for (convolved.s1.filter_dom$x, 0, filter.extent.0) {
                        convolved[0] = (convolved[0] + (float64(filter[(t1678 + convolved.s1.filter_dom$x)])*float64(select(t1679, 0.000000f, input[(t1680 + convolved.s1.filter_dom$x)]))))
                      }
                    }
                  }
                }
                output[((t1658 + output.s0.channel.c_in.base) + 1)] = float32(convolved[0])
                free convolved
                allocate convolved[float64 * 1]
                produce convolved {
                  convolved[0] = 0.000000
                  let t1681 = (((output.s0.channel.c_in.base + 2)*filter.stride.3) - t1418)
                  for (convolved.s1.filter_dom$z, 0, filter.extent.2) {
                    let t1686 = ((input.extent.2 - convolved.s1.filter_dom$z) <= t1637)
                    let t1685 = (t1637 < (0 - convolved.s1.filter_dom$z))
                    let t1684 = (t1681 + (convolved.s1.filter_dom$z*filter.stride.2))
                    let t1687 = (t1638 + (max(min((t1637 + convolved.s1.filter_dom$z), (input.extent.2 + -1)), 0)*input.stride.2))
                    for (convolved.s1.filter_dom$y, 0, filter.extent.1) {
                      let t1690 = ((((t1651 < (0 - convolved.s1.filter_dom$y)) || ((input.extent.1 - convolved.s1.filter_dom$y) <= t1651)) || t1685) || t1686)
                      let t1691 = (t1687 + (max(min((t1651 + convolved.s1.filter_dom$y), (input.extent.1 + -1)), 0)*input.stride.1))
                      let t1689 = (t1684 + (convolved.s1.filter_dom$y*filter.stride.1))
                      for (convolved.s1.filter_dom$x, 0, filter.extent.0) {
                        convolved[0] = (convolved[0] + (float64(filter[(t1689 + convolved.s1.filter_dom$x)])*float64(select(t1690, 0.000000f, input[(t1691 + convolved.s1.filter_dom$x)]))))
                      }
                    }
                  }
                }
                output[((t1658 + output.s0.channel.c_in.base) + 2)] = float32(convolved[0])
                free convolved
              }
            }
          }
        }
      }
      _halide_buffer_set_host_dirty(output.buffer, (uint1)1)
    } else if (((filter.extent.3 % 2) == 0)) {
      let halide_copy_to_host_result$1 = halide_copy_to_host(filter.buffer)
      assert((halide_copy_to_host_result$1 == 0), halide_copy_to_host_result$1)
      let halide_copy_to_host_result$4 = halide_copy_to_host(input.buffer)
      assert((halide_copy_to_host_result$4 == 0), halide_copy_to_host_result$4)
      let halide_copy_to_host_result$7 = halide_copy_to_host(output.buffer)
      assert((halide_copy_to_host_result$7 == 0), halide_copy_to_host_result$7)
      let t1706 = (((output.min.0 + (output.min.1*output.stride.1)) + (output.min.2*output.stride.2)) + (output.min.3*output.stride.3))
      let t1707 = (stride*3)
      let t1708 = max((output.extent.1/4), 0)
      let t1699 = (stride < 0)
      let t1705 = max(((output.extent.1 + 3)/4), t1708)
      let t1693 = ((output.extent.0 + 1)/2)
      let t1696 = (((input.min.0 + (input.min.1*input.stride.1)) + (input.min.2*input.stride.2)) + (input.min.3*input.stride.3))
      let t1695 = (((filter.min.0 + (filter.min.1*filter.stride.1)) + (filter.min.2*filter.stride.2)) + (filter.min.3*filter.stride.3))
      let t1694 = ((output.min.0 + output.extent.0) + -2)
      for (output.s0.batch, output.min.3, output.extent.3) {
        let t1720 = ((output.s0.batch*output.stride.3) - t1706)
        let t1721 = (output.s0.batch*input.stride.3)
        let t1712 = select(t1699, (0 - t1707), 0)
        let t1714 = select(t1699, t1707, 0)
        let t1713 = select(t1699, 0, t1707)
        let t1719 = (t1705 - t1708)
        parallel (output.s0.y, output.min.2, output.extent.2) {
          let t1732 = (t1720 + (output.s0.y*output.stride.2))
          let t1733 = (output.s0.y*stride)
          let t1734 = (0 - min(t1733, 0))
          let t1723 = min(max((input.extent.2 - t1733), t1734), filter.extent.2)
          let t1722 = min(t1734, filter.extent.2)
          let t1727 = (input.extent.1 - t1713)
          for (output.s0.x.xo, 0, t1708) {
            let t1746 = (output.min.1 + (output.s0.x.xo*4))
            let t1747 = (t1732 + (t1746*output.stride.1))
            let t1748 = (t1746*stride)
            let t1749 = (t1712 - t1748)
            let t1750 = (t1714 + t1748)
            let t1740 = min(max(min((t1727 - t1748), (input.extent.1 - t1750)), max(max((0 - t1750), t1749), 0)), filter.extent.1)
            let t1739 = min(max(t1749, 0), filter.extent.1)
            let t1743 = (filter.extent.2 - t1723)
            for (output.s0.channel.c_out, 0, t1693) {
              let output.s0.channel.c_in.base = min((output.min.0 + (output.s0.channel.c_out*2)), t1694)
              allocate convolved[float64 * 4]
              produce convolved {
                convolved[ramp(0, 1, 4)] = x4(0.000000)
                let t1751 = ((output.s0.channel.c_in.base*filter.stride.3) - t1695)
                for (convolved.s1.filter_dom$z, 0, t1722) {
                  let t1756 = ((input.extent.2 - convolved.s1.filter_dom$z) <= t1733)
                  let t1755 = (t1733 < (0 - convolved.s1.filter_dom$z))
                  let t1757 = (max(min((t1733 + convolved.s1.filter_dom$z), (input.extent.2 + -1)), 0)*input.stride.2)
                  let t1754 = (t1751 + (convolved.s1.filter_dom$z*filter.stride.2))
                  for (convolved.s1.filter_dom$y, 0, filter.extent.1) {
                    let t1761 = (input.extent.1 - convolved.s1.filter_dom$y)
                    let t1760 = (0 - convolved.s1.filter_dom$y)
                    let t1759 = (t1754 + (convolved.s1.filter_dom$y*filter.stride.1))
                    let t1762 = (t1748 + convolved.s1.filter_dom$y)
                    let t1763 = (input.extent.1 + -1)
                    for (convolved.s1.filter_dom$x, 0, filter.extent.0) {
                      convolved[ramp(0, 1, 4)] = (let t1363 = ramp(t1748, stride, 4) in (convolved[ramp(0, 1, 4)] + (x4(float64(filter[(t1759 + convolved.s1.filter_dom$x)]))*float64x4(select(((((t1363 < x4(t1760)) || (x4(t1761) <= t1363)) || x4(t1755)) || x4(t1756)), x4(0.000000f), input[((x4(((t1721 - t1696) + t1757)) + (max(min(ramp(t1762, stride, 4), x4(t1763)), x4(0))*x4(input.stride.1))) + x4(convolved.s1.filter_dom$x))])))))
                    }
                  }
                }
                let t1765 = ((output.s0.channel.c_in.base*filter.stride.3) - t1695)
                let t1764 = (t1723 - t1722)
                let t1770 = (filter.extent.1 - t1740)
                for (convolved.s1.filter_dom$z, t1722, t1764) {
                  let t1772 = ((t1733 + convolved.s1.filter_dom$z)*input.stride.2)
                  let t1771 = (t1765 + (convolved.s1.filter_dom$z*filter.stride.2))
                  for (convolved.s1.filter_dom$y, 0, t1739) {
                    let t1776 = (input.extent.1 - convolved.s1.filter_dom$y)
                    let t1775 = (0 - convolved.s1.filter_dom$y)
                    let t1774 = (t1771 + (convolved.s1.filter_dom$y*filter.stride.1))
                    let t1777 = (t1748 + convolved.s1.filter_dom$y)
                    let t1778 = (input.extent.1 + -1)
                    for (convolved.s1.filter_dom$x, 0, filter.extent.0) {
                      convolved[ramp(0, 1, 4)] = (let t1372 = ramp(t1748, stride, 4) in (convolved[ramp(0, 1, 4)] + (x4(float64(filter[(t1774 + convolved.s1.filter_dom$x)]))*float64x4(select(((t1372 < x4(t1775)) || (x4(t1776) <= t1372)), x4(0.000000f), input[((x4(((t1721 - t1696) + t1772)) + (max(min(ramp(t1777, stride, 4), x4(t1778)), x4(0))*x4(input.stride.1))) + x4(convolved.s1.filter_dom$x))])))))
                    }
                  }
                  let t1782 = (stride*input.stride.1)
                  let t1779 = (t1740 - t1739)
                  let t1781 = ((t1721 - t1696) + ((t1733 + convolved.s1.filter_dom$z)*input.stride.2))
                  let t1780 = (t1765 + (convolved.s1.filter_dom$z*filter.stride.2))
                  for (convolved.s1.filter_dom$y, t1739, t1779) {
                    let t1784 = (t1781 + ((t1748 + convolved.s1.filter_dom$y)*input.stride.1))
                    let t1783 = (t1780 + (convolved.s1.filter_dom$y*filter.stride.1))
                    for (convolved.s1.filter_dom$x, 0, filter.extent.0) {
                      convolved[ramp(0, 1, 4)] = (convolved[ramp(0, 1, 4)] + (x4(float64(filter[(t1783 + convolved.s1.filter_dom$x)]))*float64x4(input[ramp((t1784 + convolved.s1.filter_dom$x), t1782, 4)])))
                    }
                  }
                  let t1786 = ((t1733 + convolved.s1.filter_dom$z)*input.stride.2)
                  let t1785 = (t1765 + (convolved.s1.filter_dom$z*filter.stride.2))
                  for (convolved.s1.filter_dom$y, t1740, t1770) {
                    let t1789 = (input.extent.1 - convolved.s1.filter_dom$y)
                    let t1788 = (t1785 + (convolved.s1.filter_dom$y*filter.stride.1))
                    let t1790 = (t1748 + convolved.s1.filter_dom$y)
                    let t1791 = (input.extent.1 + -1)
                    for (convolved.s1.filter_dom$x, 0, filter.extent.0) {
                      convolved[ramp(0, 1, 4)] = (convolved[ramp(0, 1, 4)] + (x4(float64(filter[(t1788 + convolved.s1.filter_dom$x)]))*float64x4(select((ramp(t1748, stride, 4) < x4(t1789)), input[((x4(((t1721 - t1696) + t1786)) + (max(min(ramp(t1790, stride, 4), x4(t1791)), x4(0))*x4(input.stride.1))) + x4(convolved.s1.filter_dom$x))], x4(0.000000f)))))
                    }
                  }
                }
                let t1792 = ((output.s0.channel.c_in.base*filter.stride.3) - t1695)
                for (convolved.s1.filter_dom$z, t1723, t1743) {
                  let t1796 = ((input.extent.2 - convolved.s1.filter_dom$z) <= t1733)
                  let t1797 = (max(min((t1733 + convolved.s1.filter_dom$z), (input.extent.2 + -1)), 0)*input.stride.2)
                  let t1795 = (t1792 + (convolved.s1.filter_dom$z*filter.stride.2))
                  for (convolved.s1.filter_dom$y, 0, filter.extent.1) {
                    let t1801 = (input.extent.1 - convolved.s1.filter_dom$y)
                    let t1800 = (0 - convolved.s1.filter_dom$y)
                    let t1799 = (t1795 + (convolved.s1.filter_dom$y*filter.stride.1))
                    let t1802 = (t1748 + convolved.s1.filter_dom$y)
                    let t1803 = (input.extent.1 + -1)
                    for (convolved.s1.filter_dom$x, 0, filter.extent.0) {
                      convolved[ramp(0, 1, 4)] = (let t1375 = ramp(t1748, stride, 4) in (convolved[ramp(0, 1, 4)] + (x4(float64(filter[(t1799 + convolved.s1.filter_dom$x)]))*float64x4(select((((t1375 < x4(t1800)) || (x4(t1801) <= t1375)) || x4(t1796)), x4(0.000000f), input[((x4(((t1721 - t1696) + t1797)) + (max(min(ramp(t1802, stride, 4), x4(t1803)), x4(0))*x4(input.stride.1))) + x4(convolved.s1.filter_dom$x))])))))
                    }
                  }
                }
              }
              output[ramp((t1747 + output.s0.channel.c_in.base), output.stride.1, 4)] = float32x4(convolved[ramp(0, 1, 4)])
              free convolved
              allocate convolved[float64 * 4]
              produce convolved {
                convolved[ramp(0, 1, 4)] = x4(0.000000)
                let t1804 = (((output.s0.channel.c_in.base + 1)*filter.stride.3) - t1695)
                for (convolved.s1.filter_dom$z, 0, t1722) {
                  let t1809 = ((input.extent.2 - convolved.s1.filter_dom$z) <= t1733)
                  let t1808 = (t1733 < (0 - convolved.s1.filter_dom$z))
                  let t1810 = (max(min((t1733 + convolved.s1.filter_dom$z), (input.extent.2 + -1)), 0)*input.stride.2)
                  let t1807 = (t1804 + (convolved.s1.filter_dom$z*filter.stride.2))
                  for (convolved.s1.filter_dom$y, 0, filter.extent.1) {
                    let t1814 = (input.extent.1 - convolved.s1.filter_dom$y)
                    let t1813 = (0 - convolved.s1.filter_dom$y)
                    let t1812 = (t1807 + (convolved.s1.filter_dom$y*filter.stride.1))
                    let t1815 = (t1748 + convolved.s1.filter_dom$y)
                    let t1816 = (input.extent.1 + -1)
                    for (convolved.s1.filter_dom$x, 0, filter.extent.0) {
                      convolved[ramp(0, 1, 4)] = (let t1379 = ramp(t1748, stride, 4) in (convolved[ramp(0, 1, 4)] + (x4(float64(filter[(t1812 + convolved.s1.filter_dom$x)]))*float64x4(select(((((t1379 < x4(t1813)) || (x4(t1814) <= t1379)) || x4(t1808)) || x4(t1809)), x4(0.000000f), input[((x4(((t1721 - t1696) + t1810)) + (max(min(ramp(t1815, stride, 4), x4(t1816)), x4(0))*x4(input.stride.1))) + x4(convolved.s1.filter_dom$x))])))))
                    }
                  }
                }
                let t1818 = (((output.s0.channel.c_in.base + 1)*filter.stride.3) - t1695)
                let t1817 = (t1723 - t1722)
                let t1823 = (filter.extent.1 - t1740)
                for (convolved.s1.filter_dom$z, t1722, t1817) {
                  let t1825 = ((t1733 + convolved.s1.filter_dom$z)*input.stride.2)
                  let t1824 = (t1818 + (convolved.s1.filter_dom$z*filter.stride.2))
                  for (convolved.s1.filter_dom$y, 0, t1739) {
                    let t1829 = (input.extent.1 - convolved.s1.filter_dom$y)
                    let t1828 = (0 - convolved.s1.filter_dom$y)
                    let t1827 = (t1824 + (convolved.s1.filter_dom$y*filter.stride.1))
                    let t1830 = (t1748 + convolved.s1.filter_dom$y)
                    let t1831 = (input.extent.1 + -1)
                    for (convolved.s1.filter_dom$x, 0, filter.extent.0) {
                      convolved[ramp(0, 1, 4)] = (let t1388 = ramp(t1748, stride, 4) in (convolved[ramp(0, 1, 4)] + (x4(float64(filter[(t1827 + convolved.s1.filter_dom$x)]))*float64x4(select(((t1388 < x4(t1828)) || (x4(t1829) <= t1388)), x4(0.000000f), input[((x4(((t1721 - t1696) + t1825)) + (max(min(ramp(t1830, stride, 4), x4(t1831)), x4(0))*x4(input.stride.1))) + x4(convolved.s1.filter_dom$x))])))))
                    }
                  }
                  let t1835 = (stride*input.stride.1)
                  let t1832 = (t1740 - t1739)
                  let t1834 = ((t1721 - t1696) + ((t1733 + convolved.s1.filter_dom$z)*input.stride.2))
                  let t1833 = (t1818 + (convolved.s1.filter_dom$z*filter.stride.2))
                  for (convolved.s1.filter_dom$y, t1739, t1832) {
                    let t1837 = (t1834 + ((t1748 + convolved.s1.filter_dom$y)*input.stride.1))
                    let t1836 = (t1833 + (convolved.s1.filter_dom$y*filter.stride.1))
                    for (convolved.s1.filter_dom$x, 0, filter.extent.0) {
                      convolved[ramp(0, 1, 4)] = (convolved[ramp(0, 1, 4)] + (x4(float64(filter[(t1836 + convolved.s1.filter_dom$x)]))*float64x4(input[ramp((t1837 + convolved.s1.filter_dom$x), t1835, 4)])))
                    }
                  }
                  let t1839 = ((t1733 + convolved.s1.filter_dom$z)*input.stride.2)
                  let t1838 = (t1818 + (convolved.s1.filter_dom$z*filter.stride.2))
                  for (convolved.s1.filter_dom$y, t1740, t1823) {
                    let t1842 = (input.extent.1 - convolved.s1.filter_dom$y)
                    let t1841 = (t1838 + (convolved.s1.filter_dom$y*filter.stride.1))
                    let t1843 = (t1748 + convolved.s1.filter_dom$y)
                    let t1844 = (input.extent.1 + -1)
                    for (convolved.s1.filter_dom$x, 0, filter.extent.0) {
                      convolved[ramp(0, 1, 4)] = (convolved[ramp(0, 1, 4)] + (x4(float64(filter[(t1841 + convolved.s1.filter_dom$x)]))*float64x4(select((ramp(t1748, stride, 4) < x4(t1842)), input[((x4(((t1721 - t1696) + t1839)) + (max(min(ramp(t1843, stride, 4), x4(t1844)), x4(0))*x4(input.stride.1))) + x4(convolved.s1.filter_dom$x))], x4(0.000000f)))))
                    }
                  }
                }
                let t1845 = (((output.s0.channel.c_in.base + 1)*filter.stride.3) - t1695)
                for (convolved.s1.filter_dom$z, t1723, t1743) {
                  let t1849 = ((input.extent.2 - convolved.s1.filter_dom$z) <= t1733)
                  let t1850 = (max(min((t1733 + convolved.s1.filter_dom$z), (input.extent.2 + -1)), 0)*input.stride.2)
                  let t1848 = (t1845 + (convolved.s1.filter_dom$z*filter.stride.2))
                  for (convolved.s1.filter_dom$y, 0, filter.extent.1) {
                    let t1854 = (input.extent.1 - convolved.s1.filter_dom$y)
                    let t1853 = (0 - convolved.s1.filter_dom$y)
                    let t1852 = (t1848 + (convolved.s1.filter_dom$y*filter.stride.1))
                    let t1855 = (t1748 + convolved.s1.filter_dom$y)
                    let t1856 = (input.extent.1 + -1)
                    for (convolved.s1.filter_dom$x, 0, filter.extent.0) {
                      convolved[ramp(0, 1, 4)] = (let t1391 = ramp(t1748, stride, 4) in (convolved[ramp(0, 1, 4)] + (x4(float64(filter[(t1852 + convolved.s1.filter_dom$x)]))*float64x4(select((((t1391 < x4(t1853)) || (x4(t1854) <= t1391)) || x4(t1849)), x4(0.000000f), input[((x4(((t1721 - t1696) + t1850)) + (max(min(ramp(t1855, stride, 4), x4(t1856)), x4(0))*x4(input.stride.1))) + x4(convolved.s1.filter_dom$x))])))))
                    }
                  }
                }
              }
              output[ramp(((t1747 + output.s0.channel.c_in.base) + 1), output.stride.1, 4)] = float32x4(convolved[ramp(0, 1, 4)])
              free convolved
            }
          }
          let t1863 = (t1720 + (output.s0.y*output.stride.2))
          let t1857 = (output.s0.y*stride)
          let t1858 = (t1721 - t1696)
          for (output.s0.x.xo, t1708, t1719) {
            let output.s0.x.xi.new_max$1.s = (output.extent.1 - (output.s0.x.xo*4))
            let t1864 = min(output.s0.x.xi.new_max$1.s, 4)
            let t1865 = (output.min.1 + (output.s0.x.xo*4))
            for (output.s0.x.xi, 0, t1864) {
              let t1874 = (t1865 + output.s0.x.xi)
              let t1875 = (t1863 + (t1874*output.stride.1))
              let t1869 = (t1874*stride)
              for (output.s0.channel.c_out, 0, t1693) {
                let output.s0.channel.c_in.base = min((output.min.0 + (output.s0.channel.c_out*2)), t1694)
                allocate convolved[float64 * 1]
                produce convolved {
                  convolved[0] = 0.000000
                  let t1876 = ((output.s0.channel.c_in.base*filter.stride.3) - t1695)
                  for (convolved.s1.filter_dom$z, 0, filter.extent.2) {
                    let t1881 = ((input.extent.2 - convolved.s1.filter_dom$z) <= t1857)
                    let t1880 = (t1857 < (0 - convolved.s1.filter_dom$z))
                    let t1879 = (t1876 + (convolved.s1.filter_dom$z*filter.stride.2))
                    let t1882 = (t1858 + (max(min((t1857 + convolved.s1.filter_dom$z), (input.extent.2 + -1)), 0)*input.stride.2))
                    for (convolved.s1.filter_dom$y, 0, filter.extent.1) {
                      let t1885 = ((((t1869 < (0 - convolved.s1.filter_dom$y)) || ((input.extent.1 - convolved.s1.filter_dom$y) <= t1869)) || t1880) || t1881)
                      let t1886 = (t1882 + (max(min((t1869 + convolved.s1.filter_dom$y), (input.extent.1 + -1)), 0)*input.stride.1))
                      let t1884 = (t1879 + (convolved.s1.filter_dom$y*filter.stride.1))
                      for (convolved.s1.filter_dom$x, 0, filter.extent.0) {
                        convolved[0] = (convolved[0] + (float64(filter[(t1884 + convolved.s1.filter_dom$x)])*float64(select(t1885, 0.000000f, input[(t1886 + convolved.s1.filter_dom$x)]))))
                      }
                    }
                  }
                }
                output[(t1875 + output.s0.channel.c_in.base)] = float32(convolved[0])
                free convolved
                allocate convolved[float64 * 1]
                produce convolved {
                  convolved[0] = 0.000000
                  let t1887 = (((output.s0.channel.c_in.base + 1)*filter.stride.3) - t1695)
                  for (convolved.s1.filter_dom$z, 0, filter.extent.2) {
                    let t1892 = ((input.extent.2 - convolved.s1.filter_dom$z) <= t1857)
                    let t1891 = (t1857 < (0 - convolved.s1.filter_dom$z))
                    let t1890 = (t1887 + (convolved.s1.filter_dom$z*filter.stride.2))
                    let t1893 = (t1858 + (max(min((t1857 + convolved.s1.filter_dom$z), (input.extent.2 + -1)), 0)*input.stride.2))
                    for (convolved.s1.filter_dom$y, 0, filter.extent.1) {
                      let t1896 = ((((t1869 < (0 - convolved.s1.filter_dom$y)) || ((input.extent.1 - convolved.s1.filter_dom$y) <= t1869)) || t1891) || t1892)
                      let t1897 = (t1893 + (max(min((t1869 + convolved.s1.filter_dom$y), (input.extent.1 + -1)), 0)*input.stride.1))
                      let t1895 = (t1890 + (convolved.s1.filter_dom$y*filter.stride.1))
                      for (convolved.s1.filter_dom$x, 0, filter.extent.0) {
                        convolved[0] = (convolved[0] + (float64(filter[(t1895 + convolved.s1.filter_dom$x)])*float64(select(t1896, 0.000000f, input[(t1897 + convolved.s1.filter_dom$x)]))))
                      }
                    }
                  }
                }
                output[((t1875 + output.s0.channel.c_in.base) + 1)] = float32(convolved[0])
                free convolved
              }
            }
          }
        }
      }
      _halide_buffer_set_host_dirty(output.buffer, (uint1)1)
    } else {
      let halide_copy_to_host_result$2 = halide_copy_to_host(filter.buffer)
      assert((halide_copy_to_host_result$2 == 0), halide_copy_to_host_result$2)
      let halide_copy_to_host_result$5 = halide_copy_to_host(input.buffer)
      assert((halide_copy_to_host_result$5 == 0), halide_copy_to_host_result$5)
      let halide_copy_to_host_result$8 = halide_copy_to_host(output.buffer)
      assert((halide_copy_to_host_result$8 == 0), halide_copy_to_host_result$8)
      let t1909 = (stride*3)
      let t1910 = max((output.extent.1/4), 0)
      let t1903 = (stride < 0)
      let t1908 = max(((output.extent.1 + 3)/4), t1910)
      let t1907 = (((output.min.0 + (output.min.1*output.stride.1)) + (output.min.2*output.stride.2)) + (output.min.3*output.stride.3))
      let t1900 = (((input.min.0 + (input.min.1*input.stride.1)) + (input.min.2*input.stride.2)) + (input.min.3*input.stride.3))
      let t1899 = (((filter.min.0 + (filter.min.1*filter.stride.1)) + (filter.min.2*filter.stride.2)) + (filter.min.3*filter.stride.3))
      for (output.s0.batch, output.min.3, output.extent.3) {
        let t1921 = (output.s0.batch*input.stride.3)
        let t1914 = select(t1903, (0 - t1909), 0)
        let t1916 = select(t1903, t1909, 0)
        let t1915 = select(t1903, 0, t1909)
        let t1919 = ((output.s0.batch*output.stride.3) - t1907)
        let t1920 = (t1908 - t1910)
        parallel (output.s0.y, output.min.2, output.extent.2) {
          let t1931 = (output.s0.y*stride)
          let t1932 = (0 - min(t1931, 0))
          let t1923 = min(max((input.extent.2 - t1931), t1932), filter.extent.2)
          let t1922 = min(t1932, filter.extent.2)
          let t1927 = (input.extent.1 - t1915)
          let t1930 = (t1919 + (output.s0.y*output.stride.2))
          for (output.s0.x.xo, 0, t1910) {
            let t1943 = (output.min.1 + (output.s0.x.xo*4))
            let t1944 = (t1943*stride)
            let t1945 = (t1914 - t1944)
            let t1946 = (t1916 + t1944)
            let t1938 = min(max(min((t1927 - t1944), (input.extent.1 - t1946)), max(max((0 - t1946), t1945), 0)), filter.extent.1)
            let t1937 = min(max(t1945, 0), filter.extent.1)
            let t1941 = (filter.extent.2 - t1923)
            let t1942 = (t1930 + (t1943*output.stride.1))
            for (output.s0.channel, output.min.0, output.extent.0) {
              allocate convolved[float64 * 4]
              produce convolved {
                convolved[ramp(0, 1, 4)] = x4(0.000000)
                let t1947 = ((output.s0.channel*filter.stride.3) - t1899)
                for (convolved.s1.filter_dom$z, 0, t1922) {
                  let t1952 = ((input.extent.2 - convolved.s1.filter_dom$z) <= t1931)
                  let t1951 = (t1931 < (0 - convolved.s1.filter_dom$z))
                  let t1953 = (max(min((t1931 + convolved.s1.filter_dom$z), (input.extent.2 + -1)), 0)*input.stride.2)
                  let t1950 = (t1947 + (convolved.s1.filter_dom$z*filter.stride.2))
                  for (convolved.s1.filter_dom$y, 0, filter.extent.1) {
                    let t1957 = (input.extent.1 - convolved.s1.filter_dom$y)
                    let t1956 = (0 - convolved.s1.filter_dom$y)
                    let t1955 = (t1950 + (convolved.s1.filter_dom$y*filter.stride.1))
                    let t1958 = (t1944 + convolved.s1.filter_dom$y)
                    let t1959 = (input.extent.1 + -1)
                    for (convolved.s1.filter_dom$x, 0, filter.extent.0) {
                      convolved[ramp(0, 1, 4)] = (let t1399 = ramp(t1944, stride, 4) in (convolved[ramp(0, 1, 4)] + (x4(float64(filter[(t1955 + convolved.s1.filter_dom$x)]))*float64x4(select(((((t1399 < x4(t1956)) || (x4(t1957) <= t1399)) || x4(t1951)) || x4(t1952)), x4(0.000000f), input[((x4(((t1921 - t1900) + t1953)) + (max(min(ramp(t1958, stride, 4), x4(t1959)), x4(0))*x4(input.stride.1))) + x4(convolved.s1.filter_dom$x))])))))
                    }
                  }
                }
                let t1961 = ((output.s0.channel*filter.stride.3) - t1899)
                let t1960 = (t1923 - t1922)
                let t1966 = (filter.extent.1 - t1938)
                for (convolved.s1.filter_dom$z, t1922, t1960) {
                  let t1968 = ((t1931 + convolved.s1.filter_dom$z)*input.stride.2)
                  let t1967 = (t1961 + (convolved.s1.filter_dom$z*filter.stride.2))
                  for (convolved.s1.filter_dom$y, 0, t1937) {
                    let t1972 = (input.extent.1 - convolved.s1.filter_dom$y)
                    let t1971 = (0 - convolved.s1.filter_dom$y)
                    let t1970 = (t1967 + (convolved.s1.filter_dom$y*filter.stride.1))
                    let t1973 = (t1944 + convolved.s1.filter_dom$y)
                    let t1974 = (input.extent.1 + -1)
                    for (convolved.s1.filter_dom$x, 0, filter.extent.0) {
                      convolved[ramp(0, 1, 4)] = (let t1408 = ramp(t1944, stride, 4) in (convolved[ramp(0, 1, 4)] + (x4(float64(filter[(t1970 + convolved.s1.filter_dom$x)]))*float64x4(select(((t1408 < x4(t1971)) || (x4(t1972) <= t1408)), x4(0.000000f), input[((x4(((t1921 - t1900) + t1968)) + (max(min(ramp(t1973, stride, 4), x4(t1974)), x4(0))*x4(input.stride.1))) + x4(convolved.s1.filter_dom$x))])))))
                    }
                  }
                  let t1978 = (stride*input.stride.1)
                  let t1975 = (t1938 - t1937)
                  let t1977 = ((t1921 - t1900) + ((t1931 + convolved.s1.filter_dom$z)*input.stride.2))
                  let t1976 = (t1961 + (convolved.s1.filter_dom$z*filter.stride.2))
                  for (convolved.s1.filter_dom$y, t1937, t1975) {
                    let t1980 = (t1977 + ((t1944 + convolved.s1.filter_dom$y)*input.stride.1))
                    let t1979 = (t1976 + (convolved.s1.filter_dom$y*filter.stride.1))
                    for (convolved.s1.filter_dom$x, 0, filter.extent.0) {
                      convolved[ramp(0, 1, 4)] = (convolved[ramp(0, 1, 4)] + (x4(float64(filter[(t1979 + convolved.s1.filter_dom$x)]))*float64x4(input[ramp((t1980 + convolved.s1.filter_dom$x), t1978, 4)])))
                    }
                  }
                  let t1982 = ((t1931 + convolved.s1.filter_dom$z)*input.stride.2)
                  let t1981 = (t1961 + (convolved.s1.filter_dom$z*filter.stride.2))
                  for (convolved.s1.filter_dom$y, t1938, t1966) {
                    let t1985 = (input.extent.1 - convolved.s1.filter_dom$y)
                    let t1984 = (t1981 + (convolved.s1.filter_dom$y*filter.stride.1))
                    let t1986 = (t1944 + convolved.s1.filter_dom$y)
                    let t1987 = (input.extent.1 + -1)
                    for (convolved.s1.filter_dom$x, 0, filter.extent.0) {
                      convolved[ramp(0, 1, 4)] = (convolved[ramp(0, 1, 4)] + (x4(float64(filter[(t1984 + convolved.s1.filter_dom$x)]))*float64x4(select((ramp(t1944, stride, 4) < x4(t1985)), input[((x4(((t1921 - t1900) + t1982)) + (max(min(ramp(t1986, stride, 4), x4(t1987)), x4(0))*x4(input.stride.1))) + x4(convolved.s1.filter_dom$x))], x4(0.000000f)))))
                    }
                  }
                }
                let t1988 = ((output.s0.channel*filter.stride.3) - t1899)
                for (convolved.s1.filter_dom$z, t1923, t1941) {
                  let t1992 = ((input.extent.2 - convolved.s1.filter_dom$z) <= t1931)
                  let t1993 = (max(min((t1931 + convolved.s1.filter_dom$z), (input.extent.2 + -1)), 0)*input.stride.2)
                  let t1991 = (t1988 + (convolved.s1.filter_dom$z*filter.stride.2))
                  for (convolved.s1.filter_dom$y, 0, filter.extent.1) {
                    let t1997 = (input.extent.1 - convolved.s1.filter_dom$y)
                    let t1996 = (0 - convolved.s1.filter_dom$y)
                    let t1995 = (t1991 + (convolved.s1.filter_dom$y*filter.stride.1))
                    let t1998 = (t1944 + convolved.s1.filter_dom$y)
                    let t1999 = (input.extent.1 + -1)
                    for (convolved.s1.filter_dom$x, 0, filter.extent.0) {
                      convolved[ramp(0, 1, 4)] = (let t1411 = ramp(t1944, stride, 4) in (convolved[ramp(0, 1, 4)] + (x4(float64(filter[(t1995 + convolved.s1.filter_dom$x)]))*float64x4(select((((t1411 < x4(t1996)) || (x4(t1997) <= t1411)) || x4(t1992)), x4(0.000000f), input[((x4(((t1921 - t1900) + t1993)) + (max(min(ramp(t1998, stride, 4), x4(t1999)), x4(0))*x4(input.stride.1))) + x4(convolved.s1.filter_dom$x))])))))
                    }
                  }
                }
              }
              output[ramp((t1942 + output.s0.channel), output.stride.1, 4)] = float32x4(convolved[ramp(0, 1, 4)])
              free convolved
            }
          }
          let t2000 = (output.s0.y*stride)
          let t2001 = (t1921 - t1900)
          let t2004 = (t1919 + (output.s0.y*output.stride.2))
          for (output.s0.x.xo, t1910, t1920) {
            let output.s0.x.xi.new_max$2.s = (output.extent.1 - (output.s0.x.xo*4))
            let t2005 = min(output.s0.x.xi.new_max$2.s, 4)
            let t2006 = (output.min.1 + (output.s0.x.xo*4))
            for (output.s0.x.xi, 0, t2005) {
              let t2013 = (t2006 + output.s0.x.xi)
              let t2009 = (t2013*stride)
              let t2012 = (t2004 + (t2013*output.stride.1))
              for (output.s0.channel, output.min.0, output.extent.0) {
                allocate convolved[float64 * 1]
                produce convolved {
                  convolved[0] = 0.000000
                  let t2014 = ((output.s0.channel*filter.stride.3) - t1899)
                  for (convolved.s1.filter_dom$z, 0, filter.extent.2) {
                    let t2019 = ((input.extent.2 - convolved.s1.filter_dom$z) <= t2000)
                    let t2018 = (t2000 < (0 - convolved.s1.filter_dom$z))
                    let t2017 = (t2014 + (convolved.s1.filter_dom$z*filter.stride.2))
                    let t2020 = (t2001 + (max(min((t2000 + convolved.s1.filter_dom$z), (input.extent.2 + -1)), 0)*input.stride.2))
                    for (convolved.s1.filter_dom$y, 0, filter.extent.1) {
                      let t2023 = ((((t2009 < (0 - convolved.s1.filter_dom$y)) || ((input.extent.1 - convolved.s1.filter_dom$y) <= t2009)) || t2018) || t2019)
                      let t2024 = (t2020 + (max(min((t2009 + convolved.s1.filter_dom$y), (input.extent.1 + -1)), 0)*input.stride.1))
                      let t2022 = (t2017 + (convolved.s1.filter_dom$y*filter.stride.1))
                      for (convolved.s1.filter_dom$x, 0, filter.extent.0) {
                        convolved[0] = (convolved[0] + (float64(filter[(t2022 + convolved.s1.filter_dom$x)])*float64(select(t2023, 0.000000f, input[(t2024 + convolved.s1.filter_dom$x)]))))
                      }
                    }
                  }
                }
                output[(t2012 + output.s0.channel)] = float32(convolved[0])
                free convolved
              }
            }
          }
        }
      }
      _halide_buffer_set_host_dirty(output.buffer, (uint1)1)
    }
  }
}
return_second(halide_print(stringify("Exiting Pipeline Convolution", "\n")), "Exiting Pipeline Convolution")
}


